var NTConfig_LoggingEnabled = false;
var NTConfig_TwelveHourClock = false;
var NTConfig_maxLogSize = 10000000;
var NTConfig_Log_Level = 0;
var NTConfig_Item_Level = 1;

Include("Common/Libs/CLCommon.ntl");
var _CLL_LogList = new Array();

// Logger Message Types
const CLL_TYPE_LOG = 0;
const CLL_TYPE_ITEM = 1;

// Message Levels
const CLL_LEVEL_DEBUG = 0;
const CLL_LEVEL_INFO = 1;
const CLL_LEVEL_WARN = 2;
const CLL_LEVEL_ERROR = 3;
const CLL_LEVEL_ITEM_WHITE = 0;
const CLL_LEVEL_ITEM_MAGIC = 1;
const CLL_LEVEL_ITEM_RARE = 2;
const CLL_LEVEL_ITEM_CRAFT = 3;
const CLL_LEVEL_ITEM_UNIQUE = 4;

// Delimeter - log msgs are of the format: scriptname, ticks, type, level, msg separated by CLL_DELIM
const CLL_DELIM = "%"
const CLL_DELIM_REPLACE = "percent"

// Log Queue size to never exceed
const CLL_LOGLIMIT = 1000;

// Internal send to script buffer size
const maxbufferlength = 63;

function CLL_Log (scriptname, type, level, msg) {
	if (arguments.length > 4) {
		sendEventToOOG(D2NT_MGR_PRINT_LOG, COLOR_1 + "CLL: log message dropped, too many arguments", 0);
		return;
	}
	ticks = GetTickCount();
	msg = scriptname + ": " + msg;
	if (arguments.length == 3) msg = "";
	regex = new RegExp(CLL_DELIM, "g");
	msg = msg.replace(regex, CLL_DELIM_REPLACE);
	maxmsglength = maxbufferlength - (3 * String(CLL_DELIM).length) - String(ticks).length - String(type).length - String(level).length;
	while (msg.length > maxmsglength) {
		msgTrunc = msg.substr(0,maxmsglength);
		msgTrunc = msgTrunc.replace(/^\s+|\s+$/g, "");
		msg = msg.substr(maxmsglength);
		CLL_LogEvent(scriptname, ticks, type, level, msgTrunc);
	}
	msg = msg.replace(/^\s+|\s+$/g, "");
	CLL_LogEvent(scriptname, ticks, type, level, msg);
}

function CLL_LogEvent(scriptname, ticks, type, level, msg) {
	logged = CLC_SendMsgToScript("NTLogHandler.ntj", ticks + CLL_DELIM + type + CLL_DELIM + level + CLL_DELIM + msg);
	if (!logged) CLL_QueueLogEvent(scriptname, ticks, type, level, msg);
}

function CLL_QueueLogEvent(scriptname, ticks, type, level, msg) {
	var _entry = new Array();
	_entry.push(msg);
	_entry.push(level);
	_entry.push(type);
	_entry.push(ticks);
	_entry.push(scriptname);
	_CLL_LogList.push(_entry);
}

function CLL_FlushLogQueue() {
	if (_CLL_LogList.length > CLL_LOGLIMIT) {
		CLC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + "CLL_FlushLogQueue: buffered length exceeds limit, flushing "+ _CLL_LogList.length +" messages");
		CLL_EmergencyFlushLogQueue();
	}
	_logList = _CLL_LogList;
	_CLL_LogList = new Array();
	for(i = 0 ; i < _logList.length ; i++) {
		scriptname = _logList[i].pop();
		ticks = _logList[i].pop();
		type = _logList[i].pop();
		level = _logList[i].pop();
		msg = _logList[i].pop();
		CLL_LogEvent(scriptname, ticks, type, level, msg);
	}
}

function CLL_EmergencyFlushLogQueue() {
	_logList = _CLL_LogList;
	_CLL_LogList = new Array();
	for(i = 0 ; i < _logList.length ; i++) {
		scriptname = _logList[i].pop();
		ticks = _logList[i].pop();
		type = _logList[i].pop();
		level = _logList[i].pop();
		msg = _logList[i].pop();
		time = CLL_TimeStamp(parseInt(log[1]));
		CLL_Logline("Configs/"+MyRealm+"/logs/Logger/flush-"+ticks+".txt", time, type, level, msg);
	}
}

function CLL_LogLine(filename, time, level, message) {
	file = FileOpen(filename, 2);
	file.WriteLine(time + ": " + level + ": " + message);
	file.Close();
}

function CLL_TimeStamp(ticks) {
	var currentSmallTicks = GetTickCount();
	var tickDiff = currentSmallTicks - ticks;
	var time = new Date();
	var currentBigTicks = time.getTime();
	var adjustedTime = currentBigTicks - tickDiff;
	time.setTime(adjustedTime);
	var hour   = time.getHours();
	var minute = time.getMinutes();
	var second = time.getSeconds();
	var millisecond = time.getMilliseconds();
	if (NTConfig_TwelveHourClock) {
		var DoN = "AM";
		if (hour > 11) { DoN = "PM"; }
		if (hour > 12) { hour = hour - 12; }
		if (hour == 0) { hour = 12; }
	}
	if (hour < 10) { hour = "0" + hour; }
	if (minute < 10) { minute = "0" + minute; }
	if (second < 10) { second = "0" + second; }
	if (String(millisecond).length == 2) { millisecond = millisecond + "0"; }
	if (String(millisecond).length == 1) { millisecond = millisecond + "00"; }
	if (NTConfig_TwelveHourClock)
		timeString = hour +	':' +  minute + ':' + second + '.' + millisecond + " " + DoN;
	else
		timeString = hour +	':' +  minute + ':' + second + '.' + millisecond;
	return timeString;
}

function CLL_InitLog(filename, time) {
	file = FileOpen(filename, 2);
	if (file.size > NTConfig_maxLogSize) {
		file.Close();
		SendCopyData("D2NT Manager", null, 9<<16, COLOR_1 + "CLLogHandler: Log Initialized: " + filename);
		file = FileOpen(filename, 1);
		file.WriteLine(time + ": " + "Initialized");	
	}
	file.Close();
}