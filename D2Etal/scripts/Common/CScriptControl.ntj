var CurScriptIndex = 0;
var LastScript = false;
var Rev = "32-RD";

var SoJNotify = false;
var CloneDiabloString = GetLocaleString(11005);
var SoJString = GetLocaleString(11004).substr(3);
var CloneDiabloNotify = false;
var SoJElapsedTime = 0;
var InitLife;
var Corpses = 0;
var checkActOnce = false;
var endtime = null;

function D2NTStatus(where, time, message) { return SendCopyData('D2NT Manager', null, where << 16 | time, message); }
function NTMain(){
	if (!Load("Common/Tools/CTLogHandler.ntj")) {
		CLC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + "Error: Logger failed to initialize");
	}
	Delay(1000);
	InitLife = me.hp;

	Include("Common/Libs/CLCommon.ntl");
	CLC_IncludeLibs();
	CLC_IncludeConfig();
	Include("Common/Libs/CLExp.ntl");
	
	try {
		NT_LoadConfig();
	}
	catch (e) {
		while(me.ingame){
			Print(COLOR_1 + "Error in your char config file");
			Print(COLOR_1 + "You must correct the error before the bot will run");
			Print(COLOR_2 + "To get help on this error visit");
			Print(COLOR_2 + "www.projectetal.com/wiki -> load config errors");
			Delay(10000);
		}
	}
	
	CLE_InitializeStats();

	if (NTConfig_MinIngameTime > 0) {
		endtime = GetTickCount() + 1000 * 60 * NTConfig_MinIngameTime;
	}

	if(!me.gamename && me.GetStat(12) > 90 && !me.playertype) { Say("/players 5"); } // For softcore SP players to increase MF and such

	CSC_ClearMessages(); // leech improvements
	
	if (!CLSI_LoadNIPFiles()){
		CLC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + "Exiting Game- Either no inventory on character or invalid NIP filename/path in character configuration");
		ExitGame();
	}
	CLU_LogExitStatus("F");
	if(NTConfig_StartDelay > 0){
		CLC_Delay(NTConfig_StartDelay);
	}
	
	GetPath(me.areaid, me.x, me.y, me.x, me.y, true);

	SetUIState(0x0A, true);

	if(!CLT_PutBackEnigma()) {
		CLC_Delay(240000); // Wait 4 mins to prevent r/d 240000
		ExitGame();
	}
		
	if(NTConfig_CheckPassword && !me.gamepassword){
		Print(COLOR_1 + "1No password found exiting game");//s
		CLC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + "Exiting Game- No Password");
		CLC_Delay(2000);
		ExitGame();
	}

	Corpses = CLT_GetCorpses();
	if (Corpses > 0 || InitLife < 10)
		CLU_DeathLog(Corpses, InitLife);
	
	if(NTConfig_Script.length > 0){
		CLCU_InitCubing();
		CLT_ClearInventory();
		CLT_ClearBelt();

		if(!CLT_LookForEnigma()) {
			if (GetUIState(0x01))
				SetUIState(0x01, false);
			CLC_Delay(240000); // Wait 4 mins to prevent r/d 240000
			ExitGame();
		}
		
		if(NTConfig_GoWestFromLut){ // if bot starts in act 2 use warriv to go to act 1
			GoWestFromLutGholein();
		}

		Load("Common/Tools/CTToolsThread.ntj");
		
		if(NTConfig_HostileHandler)
			Load("Common/Tools/CTHostHandler.ntj");

		if(NTConfig_Announcer)
			Load("Common/Tools/CTLevelAnnouncer.ntj");

		if(DPSMeter)
			Load("Common/Tools/CTDPS.ntj");
		
		Load("Common/Tools/CTChatR.ntj");
		
		RegisterEvent(EVENT_GAMEMSG, CSC_GameMsgEvents);
		RegisterEvent(EVENT_KEYDOWN, CSC_KeyEvents);
		RegisterEvent(EVENT_SCRIPTMSG, CSC_ScriptMsgEvents);

		Load("Common/Bots/" + NTConfig_Script[CurScriptIndex]);
		SetStatusText(Rev + " "+ NTConfig_Script[CurScriptIndex]);

		Include("Common/Libs/CLSnagit.ntl");
		CLSI_ClearIgnoredItems();

		CLC_LogCurScript(NTConfig_Script[CurScriptIndex]);//jinay item log

		var leaderParty = false;
		
		// Dynamic leaders
		var NTLeader_LoggedFromFile = CLC_File("Configs/"+MyRealm+"/logs/" + me.account + ".leaderName.txt", 0);
		
		while(!LastScript || CloneDiabloNotify || SoJNotify || CLC_InMyParty(NTConfig_Leader) || CLC_InMyParty(NTLeader_LoggedFromFile)){ // SoJNotify is a part of soj addon
			CLC_Delay(1000);

			for(var i = 0 ; i < NTConfig_Script.length && !leaderParty ; i++){
				if(NTConfig_Script[i].toLowerCase().indexOf("leech") != -1 || NTConfig_Script[i].toLowerCase().indexOf("helper") != -1){
					for(var j = 0 ; j < NTConfig_PartyMaxTime && !CLC_InMyParty(NTConfig_Leader) && !CLC_InMyParty(NTLeader_LoggedFromFile) ; j++)
						Delay(1000);

					if(CLC_InMyParty(NTConfig_Leader) || CLC_InMyParty(NTLeader_LoggedFromFile)){
						leaderParty = true;
					}
					else{
						CSC_LoadConfigError();
						Print(COLOR_1 + "Can't find leader!");
						Delay(500);
						Print(COLOR_1 + "You either have it spelled or cased wrong");
						Delay(500);
						Print(COLOR_1 + "Or leader is not in game");
						Delay(500);
						Print(COLOR_1 + "Check logs/namelog/" + me.charname + "-leaderName.txt for possible leader names from this game"); // this should print a list of all toons in game so people can C/P if they are having probs
						Delay(1500);
						ExitGame();
					}
					break;
				}
			}

			if(LastScript && !checkActOnce && leaderParty && CLC_InMyParty(NTConfig_Leader)) {
				CLTM_CheckAct();
				checkActOnce = true; // this is added so if you need to go back in someplace the bot doesn't keep towning
			}

			if(leaderParty && !CLC_InMyParty(NTConfig_Leader) && !CLC_InMyParty(NTLeader_LoggedFromFile)){
				if(!LastScript) {
					CLE_ComputeStats(false);
				}
				Delay(350);
				_Checkscript = GetScript();
				if(_Checkscript){
					CSC_StopScriptLeecher();
					Delay(150);
				}
				CSC_CancelMenus();
				Delay(NTConfig_LeechExitDelay);
				ExitGame();
			}

			if(SoJNotify){
				SoJElapsedTime += 1;

				if(LastScript){
					CLTM_CheckAct();
					SetStatusText(COLOR_4 + "Waiting for SoJ sales... " + COLOR_0 + (NTConfig_SoJWaitTime*60-SoJElapsedTime));
				}

				if(SoJElapsedTime >= NTConfig_SoJWaitTime*60)
					SoJNotify = false;
			}
		}
	}
	
	
	CLE_ComputeStats(false);
	
	if(NTConfig_PublicMode && NTConfig_PropsForEtal > 0) {
		Include("Common/Globals/EtalPR.ntl");
		for(var i = 0 ; i < NTConfig_PropsForEtal ; i++) {
			Say(CLC_RandomSelect(etalSpam));
			Delay(1500);
		}
		Say("Check out ProjectEtal.com");
		Delay(1000); // change this to 1 second
	}

    if (endtime != null || NTConfig_MinIngameTime > 0 && GetTickCount() < endtime) {
		CLTM_CheckAct();
        var gameidle = parseInt((endtime - GetTickCount())/1000);        
        for(var i = 0 ; i < gameidle ; i++) {
			SetStatusText("Waiting " + (gameidle-i) + " seconds to exit game!");
            Delay(1000);
        }
    }

	ExitGame();
	Delay(5000);// testing to avoid repetive stats sent to manager log
}
var WhoDatIs; // Needed for spam catcher addition, DO NOT remove

function CSC_GameMsgEvents(msg, type){
	var _holdPauseCheck = "";
	_area = GetArea();
	switch(type){
		case 0:
			if(msg.indexOf(NTConfig_Leader) != -1){ // leech improvements
				CLC_CheckPlayer(NTConfig_Leader);
				if((_leaderareaid == 130 || _leaderareaid == 131) && msg.indexOf(NTConfig_TakeTpBaal) != -1){ // all baal leech scripts will use the same one
					CLC_File("Configs/"+MyRealm+"/logs/messagecomands/"+me.charname+"-baal.txt", 1, "takebtp")
				}
				else if((_leaderareaid == 130 || _leaderareaid == 131) && msg.indexOf(NTConfig_GrabShrine) != -1){ // so you can set the var for grabbing shrine different from the take tp one
					CLC_File("Configs/"+MyRealm+"/logs/messagecomands/"+me.charname+"-baal.txt", 1, "grabshrine")
				}
				else if(_leaderareaid == 108 && msg.indexOf(NTConfig_TakeTpDiablo) != -1){ // all diablo leech scripts will use the same one
					CLC_File("Configs/"+MyRealm+"/logs/messagecomands/"+me.charname+"-diablo.txt", 1, "takedtp")
				}
				else if(_leaderareaid == 83 && msg.indexOf(NTConfig_TakeTpTravincal) != -1){ // all diablo leech scripts will use the same one
					CLC_File("Configs/"+MyRealm+"/logs/messagecomands/"+me.charname+"-trav.txt", 1, "takettp")
				}
			}
			break;
		case 1:
			if(msg.toLowerCase().indexOf("d2nt") != -1 || msg.toLowerCase().indexOf("error") != -1 || msg.toLowerCase().indexOf("fail") != -1) {
				var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");
				var logfile = FileOpen("Configs/"+MyRealm+"/logs/errorlog/"+me.charname+"-errorlog.txt", 2);
				if(!logfile)
					var logfile = FileOpen("Configs/"+MyRealm+"/logs/errorlog/"+me.charname+"-errorlog.txt", 1);

				logfile.WriteLine(date + " - " + msg);
				logfile.Close();
			}
			else if(msg.toLowerCase().indexOf("skipped") != -1 ) {
				var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");
				var logfile = FileOpen("Configs/"+MyRealm+"/logs/skiplog/"+me.charname+"-skiplog.txt", 2);
				if(!logfile)
					var logfile = FileOpen("Configs/"+MyRealm+"/logs/skiplog/"+me.charname+"-skiplog.txt", 1);

				logfile.WriteLine(date + " - " + msg + " ( " + _area.name + " ) ");
				logfile.Close();
			}
			break;
		case 4:
            if(msg.indexOf(CloneDiabloString) != -1) {
                CloneDiabloNotify = true;
                SoJNotify = false;
                CLC_SendLogToOOG(NTC_LOG_COMMON, COLOR_4 + CloneDiabloString);
				SendCopyData(d2monitor, null, 666, CloneDiabloString);
                CSC_LogDclone();//log event to file
				if(NTConfig_ExitonDclone){ExitGame();}
				
                if(NTConfig_CheckCloneDiablo){					
                    me.maxgametime = 0;
                    SetStatusText(COLOR_1 + CloneDiabloString);
                    D2NTStatus("Stop", 0, "Stop"); //This is a fake ID itll just interrupt the current status loop. Simple but effective.
                    D2NTStatus(8, 0, CloneDiabloString);
             
                    _holdPauseCheck = CLU_GetExitStatus();
                    while(_holdPauseCheck == "T") {
                        CLC_Delay(500);
                        _holdPauseCheck = CLU_GetExitStatus();
                    }
                    CLC_StopScript(NTConfig_Script[CurScriptIndex]);
                    CLC_Delay(500);
					if(NTConfig_KillDclone){Load("Common/Bots/CBClone.ntj");}
					else{CLTM_CheckAct();}					
                }
            }
			else if(msg.indexOf(SoJString) != -1 && !CloneDiabloNotify && NTConfig_SoJWaitTime > 0) { // part of soj addon. !CloneDiabloNotify was added to prevent timer start on oversales after Diablo walks.
				if(me.diff < 2) {
					CLC_SendLogToOOG(NTC_LOG_COMMON, COLOR_4 + "Not waiting for DClone - not in a hell game");
				}
				if(me.diff == 2) {
					SoJNotify = true;
					SoJElapsedTime = 0;             
					CLC_SendLogToOOG(NTC_LOG_COMMON, COLOR_4 + msg);
					me.maxgametime = 0;
					var temp = me.realm + " [IP:" + me.gameserverip.split(".")[3] + "] " + msg.split(" ")[0]+" SOJ's sold";
					SendCopyData(d2monitor, null, 333, temp);
                }			
			}
			break;
		default: break;
	}
}

function CSC_KeyEvents(keycode){
	var _script;
	switch(keycode) {
		case Do_PauseBot:
		_script = CLC_FindScript(NTConfig_Script[CurScriptIndex]);
			if(_script) {
				if(_script.running) {
					_script.Stop();
					CSC_ClearMessages();
					CLC_Delay(300);
					ClickMap(NTC_CLICK_LUP, NTC_SHIFT_NONE, null);
					SetStatusText(COLOR_1 + Rev + "    Paused " + NTConfig_Script[CurScriptIndex]);
				}
				else {
					Load("Common/bots/" + NTConfig_Script[CurScriptIndex]);
					SetStatusText(Rev + " " + NTConfig_Script[CurScriptIndex]);
				}
			}
			break;
		case Do_PrevScript:
			_script = CLC_FindScript(NTConfig_Script[CurScriptIndex]);

			if(_script.running) {
				_script.Stop();
				CSC_ClearMessages();
				CLC_Delay(300);
				ClickMap(NTC_CLICK_LUP, NTC_SHIFT_NONE, null);
				SetStatusText(COLOR_11 + Rev + " Stopped " + NTConfig_Script[CurScriptIndex]);
				break;
			}
			else {
				for(i=0; i<NTConfig_Script.length-1; i++) {
					if(CurScriptIndex < NTConfig_Script.length-1)
						CurScriptIndex++;
					else
						CurScriptIndex = 0;
				}
				SetStatusText(COLOR_14 + Rev + " Back to " + NTConfig_Script[CurScriptIndex]);
			}
			break;
		case Do_NextScript:
			_script = CLC_FindScript(NTConfig_Script[CurScriptIndex]);

			if(_script.running) {
				_script.Stop();
				CSC_ClearMessages();
				SetStatusText(COLOR_11 + Rev + " Stopped " + NTConfig_Script[CurScriptIndex]);
			}
			else if(++CurScriptIndex < NTConfig_Script.length)
				SetStatusText(COLOR_14 + Rev + " Skipped to " + NTConfig_Script[CurScriptIndex]);
			else if(++CurScriptIndex >= NTConfig_Script.length) {
				CurScriptIndex = 0;
				SetStatusText(COLOR_2 + Rev + " Skipped to " + NTConfig_Script[CurScriptIndex]);
			}
			break;
		case Do_DropItems:
			CLU_DropItems();
			break;
		case Do_DevTools:
			CLU_DevelopementTools();
			break;
		case Do_CoordLog:
			CLU_LogPrint("Configs/"+MyRealm+"/logs/testlog/"+me.charname+"-Coords.txt", " New Coord[" + me.x + ", " + me.y + "] " );
			break;
		case Do_HotKeyList:
			CLU_KeyHotList();
			break;
		case Do_CursorILvL:
			CLU_CursorILvl();
			break;
		case Do_StatsLog:
			CLU_CheckMyStats();
			break;
		case Do_PrintCoord:
			CLU_CheckCoord();
			break;
		case Do_CheckSpace:
			if(CheckStashSpace)
				CLT_CheckFreeStashSpace(true);
			if(CheckInvSpace)
				CLT_CheckFreeInventorySpace(true);
			break;
		case Do_NipCheck:
			CLU_TLNipCheck();
			break;
		case Do_InvTxtLog:
			CLU_TLInventory();
			break;
		case Do_CheckBPs:
			CLU_BPsPrint();
			break;
		case Do_ExitGame:
			Print(COLOR_4 + "Calculating stats for game!");
			CLE_ComputeStats(false);
			ExitGame();
			break;
	}
}

function CSC_ScriptMsgEvents(msg){
	var _area;

	switch(msg){
	case "QuitGame":
		CLC_StopScript(NTConfig_Script[CurScriptIndex]);
		CSC_CancelMenus();
		LastScript = true;
		break;
	case "HOSTILE":
		CLC_SendMsgToScript(NTConfig_Script[CurScriptIndex], "pause");
		break;
	case "SCRIPT_END":
		if(++CurScriptIndex < NTConfig_Script.length)
		{
			CLTM_CheckAct();
			Load("Common/bots/" + NTConfig_Script[CurScriptIndex]);
			SetStatusText(Rev + "   " + NTConfig_Script[CurScriptIndex]);
			CLC_LogCurScript(NTConfig_Script[CurScriptIndex]);
		}
		else{
			LastScript = true;
		}
		break;
	default:
		Print(COLOR_1 + NTConfig_Script[CurScriptIndex] + " : " + msg + " failed");

		_area = GetArea();

		if(_area)
			CLC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + NTConfig_Script[CurScriptIndex] + " : " + msg + " failed (" + _area.name + ")");
		else
			CLC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + NTConfig_Script[CurScriptIndex] + " : " + msg + " failed (unknown area)");

		if(++CurScriptIndex < NTConfig_Script.length)
		{
			CLTM_CheckAct();
			Load("Common/bots/" + NTConfig_Script[CurScriptIndex]);
			SetStatusText(Rev + "  "  + NTConfig_Script[CurScriptIndex]);
			CLC_LogCurScript(NTConfig_Script[CurScriptIndex]);
		}
		else
			LastScript = true;
		break;
	}
}

function CSC_ClearMessages(){ // leech improvemetst
	for(var i = 0 ; i < NTConfig_Script.length ; i++){
		if(NTConfig_Script[i].toLowerCase().indexOf("leech") != -1){
			if(NTConfig_Script[i].toLowerCase().indexOf("baal") != -1){
				CLC_File("Configs/"+MyRealm+"/logs/messagecomands/"+me.charname+"-baal.txt", 1, " ");
			}
			if(NTConfig_Script[i].toLowerCase().indexOf("diablo") != -1){
				CLC_File("Configs/"+MyRealm+"/logs/messagecomands/"+me.charname+"-diablo.txt", 1, " ");
			}
			if(NTConfig_Script[i].toLowerCase().indexOf("trav") != -1){
				CLC_File("Configs/"+MyRealm+"/logs/messagecomands/"+me.charname+"-trav.txt", 1, " ");
			}
		}
	}
}

function CSC_CancelMenus() { // more koreans
	while (GetUIState(0x01) || GetUIState(0x08) || GetUIState(0x0C) || GetUIState(0x0F) || GetUIState(0x14) ||
		GetUIState(0x17) || GetUIState(0x19) ||   GetUIState(0x1A) || GetUIState(0x24)){

		for (var i = 0; i < 40; i++){
			if ((i % 20) == 0){
				me.Cancel(1);
			}
			Delay(100);
			if (!GetUIState(0x01) && !GetUIState(0x08) && !GetUIState(0x0C) && !GetUIState(0x0F) && !GetUIState(0x14) &&
					!GetUIState(0x17) && !GetUIState(0x19) &&  !GetUIState(0x1A) && !GetUIState(0x24)){

				CLC_PingDelay(300);
				break;
			}
		}
	}
}

function CSC_StopScriptLeecher(){
	_script = CLC_FindScript(NTConfig_Script[CurScriptIndex]);
	if(_script){
		if(_script.running){
			_script.Stop();
			CLC_Delay(150);
			ClickMap(NTC_CLICK_LUP, NTC_SHIFT_NONE, null);
		}
	}
	return;
}

function CSC_LoadConfigError(){
	var _player;
	var _myPartyId;

	_player = GetPlayerUnit();

	if(_player){
		do{
			if( _player.name == me.name)
				continue;
			CLC_LogPrintSimple("Configs/"+MyRealm+"/logs/namelog/"+me.charname+"-leaderName.txt", _player.name);
		} while(_player.GetNext());
	}
	return false;
}

function CSC_LogDclone(){
    var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");

    var LogClone = FileOpen("Configs/"+MyRealm+"/logs/DClone/"+me.name+"_Dclone.txt", 2);
    if(!LogClone)
        var LogClone = FileOpen("Configs/"+MyRealm+"/logs/DClone/"+me.name+"_Dclone.txt", 1);
  
        LogClone.WriteLine("DClone Walks"+ " Server Address " + me.gameserverip + " " + date);

    LogClone.Close();
    return;
}