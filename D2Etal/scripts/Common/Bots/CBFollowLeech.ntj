//NTConfig_Leader = "Fishsticks";	// ~~~~EDIT THIS~~~~CaSe SeNsItIvE~~~~ var  _attack = true, // ~~~~EDIT THIS~~~~true OR false~~~~	_messages = false; // white 'Say' messages	_openContainers = true; // open chests/racks/barrels/stashes/etc. Won't work in parts of some areas where collission map fails, mainly jail levels	NTConfig_Cubing = true;var lastchant = Math.round(GetTickCount() / 1000);var chantChars = false;// set to false chants just mercs/** Follower by kolton modified by vitycent* To initiate the follow sequence make a TP and send command "1".** Commands:* Main commands:*	1 - take leader's tp from town / move to leader's town*	2 - take leader's tp to town*	3 - town manager*	q - Activate quest chest(If any) and talk to appropriate NPCs to complete quest*	c - get corpse*	p - pick items*	s - toggle stop*	<charname> s - toggle stop <charname>* Attack:*	a - attack toggle for all*	<charname> a - attack toggle for <charname>*	aon - attack on for all*	<charname> aon - attack on for <charname>*	aoff - attack off for all*	<charname> aoff - attack off for <charname>* Teleport: *** characters without teleport skill will ignore tele command ****	tele - toggle teleport for all*	<charname> tele - toggle teleport for <charname>*	tele on - teleport on for all*	<charname> tele on -  teleport on for <charname>*	tele off - teleport off for all*	<charname> tele off - teleport off for <charname>* Skills: *** refer to skills.txt ****	all skill <skillid> - change skill for all. refer to skills.txt*	<charname> skill <skillid> - change skill for <charname>*	<class> skill <skillid> - change skill for all characters of certain class *** any part of class name will do *** for example: "sorc skill 36", "zon skill 0", "din skill 106"* Auras: *** refer to skills.txt ****	all aura <skillid> - change aura for all paladins*	<charname> aura <skillid> - change aura for <charname>* Town:*	na - move to appropriate act (after quest)*	a1-a5 - use wp to travel to act*	talk <npc name> - talk to a npc in town* Misc.*	rev - revive a bot when auto revive is diabled*	cow - enter red cow portal*	wp - all players activate a nearby wp*	<charname> wp - <charname> activates a nearby wp*	bo - barbarian precast*	<charname> tp - make a TP. Needs a TP tome if not using custom libs.*	scatter - move in a random direction (use if you're stuck by followers)*	reload - reload script. Use only in case of emergency, or after editing character config.*	quit - exit game*/var i, _leader, _leaderUnit, _split, _sender, _msg, _piece, _skill, _msgtick, _result, _charClass, _busy, _unit, _area, 	_stop = false;	_dead = false;	NTConfig_autoRevive = true; function NTMain() {	Include("Common/Libs/CLCommon.ntl");	CLC_IncludeLibs();	CLC_IncludeConfig();		NT_LoadConfig();	NTConfig_NIPFilePath.push("Quest.nip");	CLSI_LoadNIPFiles();	//NTConfig_SnagRange = 20;	CLA_Initialize();		RegisterEvent(EVENT_GAMEMSG, CSC_GameMsgEvents);	if(me.GetQuest(2,0) == 1){		NTConfig_UseMerc = true		}	Print("ÿc3Follower Script Started")	FindClass();		for (i = 0; i < 20; i += 1) {		if (GetLeader(NTConfig_Leader)){			break;		}				Delay(500);	}	if (!_leader) {		Say("Leader not found or improperly configured file.");		CLC_Delay(1000);		ExitGame();	} else {Say("Leader found.");}		CLC_PingDelay(200);		while (!CLC_InMyParty(_leader.name)) {		CLC_Delay(500);	}	me.maxgametime = 0;	Say("/w " + _leader.name + " Partied.");	CLTM_TownMove("portalspot");	while (CLC_InMyParty(_leader.name)) { // main loop		if (me.mode === 0 || me.mode === 17) {			Say("/w " + _leader.name + " Reviving...");			me.Cancel(0);			me.Cancel(1);			Delay(1000);						if (CLTM_TownMove("portalspot")) {				Say("/w " + _leader.name + " I'M ALIVE!!!");			}		}					while (!_leaderUnit) {			if (GetTickCount() - _msgtick > 3000) {				Say("Leader unit not found!");								_msgtick = GetTickCount();			}						_leaderUnit = GetLeaderUnit(_leader.name);						Delay(500);		}				while (_stop) {			CLC_Delay(200);		}				if(me.areaid == 120) { NTConfig_TPChicken = 0;}				//if (GetDistance(me, _leaderUnit) <= 50) {			CLM_GetCloserInt(_leaderUnit);		//}				if (_attack) {			ClearPosition(20, true);		}				if(me.GetSkill(52, false)){enchantgroup();}				if (!CLC_InTown() && me.classid === 3 && NTConfig_AttackSkill[2] > 0) { // paladin aura			CLC_PutSkill(NTConfig_AttackSkill[2], 0);		}				if (_leader.areaid !== me.areaid && !CLC_InTown()) {			while (_leader.areaid === 0) {				Delay(100);			}						_result = CheckExit(_leader, _leader.areaid);						if (_result) {				switch (_result) {				case 1:					Say("Taking stairs.");					Delay(500);					CLM_TakeStair(_leader.areaid);					break;				case 2:					Say("Using portal.");					Delay(500);					CLM_UsePortal(null, _leader.areaid, null);					break;				case 3:					Say("Taking waypoint.");					Delay(500);					CLM_TakeWaypoint(_leader.areaid);					break;				case 4:					Say("Special transit.");					break;				}								while (me.areaid === 0) {					Delay(100);				}								_leaderUnit = GetLeaderUnit(_leader.name);			}		}				if (CLC_InTown()) {			CLTM_TownMove("portalspot");						while (CLC_InTown()) {				CLC_Delay(250);			}		}				CLC_Delay(25);	}		//CLC_SendMsgToScript("CScriptControl.ntj", "SCRIPT_END");}			function CSC_GameMsgEvents(msg, type){	if (type != 0 && type != 4) {					return;				}	if (type === 0 && msg.indexOf(_leader.name) > -1) {		if (_busy) {					Say("/w " + _leader.name + " I'm busy!");					return;				}									_busy = true;	_split = msg.split(":");					if (_split.length >= 1 && _split[1] != undefined) {		_sender = _split[0].substring(3, _split[0].length - 3);		_msg = _split[1].substring(1);			if (_sender != NTConfig_Leader) {return;}			}		switch (_msg) {		case "cow":	if (me.areaid === 1) {					CLTM_TownMove("portalspot");					if (CLM_UsePortal("Portal", 39)) {						Say("/w " + _leader.name + " Took cow portal.");						} else {							Say("/w " + _leader.name + " Failed to take cow portal.");						}					}												break;							case "scatter":	CLM_MoveTo(me.areaid, me.x + Random(-8, 8), me.y + Random(-8, 8));						break;		case "wp":	case (me.name + " wp"):						if (CLC_InTown()) {							break;						}													CLC_Delay(Math.floor(Math.random() * 12) * 500);													_unit = CLC_FindUnit(2, GetLocaleString(22526));													if (_unit) {							for (i = 0; i < 20; i += 1) {								if (i % 5 === 0) {									if (CLM_GetCloserInt(_unit)) {										CLC_DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, _unit);									}								}															if (i % 5 === 4) {							CLM_MoveTo(_unit.areaid, _unit.x - 6, _unit.y - 6);							}															CLC_Delay(400);															if (GetUIState(0x14)) {							CLC_Delay(500);							Say("/w " + _leader.name + " Got the WP.");							break;								}							}						}													if (!GetUIState(0x14)) {							Say("/w " + _leader.name + " Failed to get the WP.");						}													me.Cancel(1);													break;								case "tele":	case (me.name + " tele"):						if (CLC_GetSkillLevel(54)) {							if (!NTConfig_Teleport) {								NTConfig_Teleport = true;																	Say("/w " + _leader.name + " Teleport on");						} else {							NTConfig_Teleport = false;											Say("/w " + _leader.name + " Teleport off");							}						}													break;								case "tele off":	case (me.name + " tele off"):							if (CLC_GetSkillLevel(54)) {								NTConfig_Teleport = true;																Say("/w " + _leader.name + " Teleport on");							}													break;		case "tele on":						case (me.name + " tele on"):							if (CLC_GetSkillLevel(54)) {								NTConfig_Teleport = true;																Say("/w " + _leader.name + " Teleport off");							}													break;								case "a": // attack toggle for everyone					case (me.name + " a"): // individual attack toggle						if (_attack) {							_attack = false;															Say("/w " + _leader.name + " Attack off");						} else {							_attack = true;										Say("/w " + _leader.name + " Attack on");						}						break;								case "aoff": // attack off for everyone						case (me.name + " aoff"): // individual attack off						Delay(150);													_attack = false;													Say("/w " + _leader.name + " Attack off");						break;								case "aon": // attack on for everyone						case (me.name + " aon"): // individual attack off						Delay(150);						_attack = true;							Say("/w " + _leader.name + " Attack on");						break;								case "c": // get corpse						CLT_GetCorpses();						break;								case "p": // pick items						Say("/w " + _leader.name + " Picking items.");						CLSI_PickItems();													if (_openContainers) {							OpenContainers(20);						}							break;								case "1": // take leader's tp to outside of town / change act if leader is in another town						if (CLC_InTown() && CLC_InTown(_leader) && CheckLeaderAct(_leader) !== me.act) {							Say("/w " + _leader.name + " Going to leader's town.");							CLTM_CheckAct(CheckLeaderAct(_leader));							CLTM_TownMove("portalspot");						} else if (CLC_InTown()) {							Say("/w " + _leader.name + " Taking portal to outside.");							CLTM_CheckAct(CheckLeaderAct(_leader));							CLTM_TownMove("portalspot");							Print("Leader areaid = " + _leader.areaid);							CLM_UsePortal("BluePortal", _leader.areaid, NTConfig_Leader);														_busy = false;														while (!GetLeader(_leader.name)) {								ClearPosition(10);								CLC_Delay(200);							}						}														break;		case "2": // take leader's tp to town					if (!CLC_InTown()) {						Delay(150);						Say("/w " + _leader.name + " Going to town.");						switch(me.act){							case 1: townid = 1;break;							case 2: townid = 40;break;							case 3: townid = 75;break;							case 4: townid = 103;break;							case 5: townid = 109;break;																		}						Print("townid = " + townid);						//CLM_UsePortal("BluePortal", townid, NTConfig_Leader);						CLM_TakeUnit(NTC_UNIT_OBJECT, 59);					}												break;							case "3": // town manager					if (CLC_InTown()) {						Say("/w " + _leader.name + " Running town manager.");						CLTMGR_TownManager();						CLTM_TownMove("portalspot");						Say("/w " + _leader.name + " Ready.");					}												break;							case "quit": // exit game						Say("/w " + _leader.name + " Good riddance.");						Delay(500);						ExitGame();						break;								case "bo": // barbarian precast					if (me.classid === 4) {						CLP_DoPrecast(true);					}											break;							case "a2": // change act					case "a3":					case "a4":					case "a5":						ChangeAct(parseInt(_msg[1], 10));						break;								case "s": // stop toggle						case (me.name + " s"): // individual stop toggle						if (_stop) {							_stop = false;															Say("/w " + _leader.name + " resuming");						} else {							_stop = true;							Say("/w " + _leader.name + " stopping");						}													break;												case (me.name + " tp"):							if (CLC_InTown()) {								Say("I'm in town.");								break;							}														if (!CLM_MakeTP()) {								Say("Out of scrolls!");							}														break;						}		}				if (msg.indexOf("talk") > -1) {				Talk(msg.split(" ")[2]);			}		if (msg.indexOf(" skill ") > -1) {			_piece = msg.split(" ")[3];					Print("Skill = " + _piece);				_skill = parseInt(_piece);											if (CLC_GetSkillLevel(_skill)) {					Say("/w " + NTConfig_Leader + " Attack skill is " + _skill);					NTConfig_AttackSkill[1] = _skill;					NTConfig_AttackSkill[3] = _skill;					CLA_Initialize();				} else {							Say("/w " + NTConfig_Leader + " I don't have that skill.");						}		}							if (me.classid === 3 && msg.indexOf(" aura ") != -1 && msg.indexOf(" all ") != -1) {						_piece = msg.split(" ")[3];							_skill = parseInt(_piece);							if (CLC_GetSkillLevel(_skill)) {								Say("/w " + NTConfig_Leader + " Active aura is " + _skill);								CLC_PutSkill(_skill, 0);								NTConfig_AttackSkill[2] = _skill;								NTConfig_AttackSkill[4] = _skill;								CLA_Initialize();							} else {								Say("/w " + NTConfig_Leader + " I don't have that aura.");							}					}		if (type === 4 && msg.indexOf(NTConfig_Leader) > -1 && (msg.indexOf("weaken") > -1 || msg.indexOf("timeout") > -1)) {				Delay(500);				ExitGame();			}					_busy = false;	return;}	function FindClass(){	switch (me.classid) {	case 0:		_charClass = "amazon";		break;	case 1:		_charClass = "sorceress";		break;	case 2:		_charClass = "necromancer";		break;	case 3:		_charClass = "paladin";		break;	case 4:		_charClass = "barbarian";		break;	case 5:		_charClass = "druid";		break;	case 6:		_charClass = "assassin";		break;	}		return _charClass}function GetLeader(name) {	_leader = GetPlayerUnit();		if (_leader) {		do {			if (_leader.name === name) {				return _leader;			}		} while (_leader.GetNext());	}	return false;}function CheckLeaderAct(leader) {	if (leader.areaid <= 39) {		return 1;	} else if(leader.areaid >= 40 && leader.areaid <= 74) {		return 2;	} else if(leader.areaid >= 75 && leader.areaid <= 102) {		return 3;	} else if(leader.areaid >= 103 && leader.areaid <= 108) {		return 4;	}		return 5;}function CheckExit(leader, area) {	var _unit = GetPresetUnits(me.areaid, NTC_UNIT_TILE);		if (_unit) {		for (var i = 0; i < _unit.length; i += 1) {			if (_unit[i].subareaid === area) {				return 1;			}		}	}		_unit = CLC_FindUnit(NTC_UNIT_OBJECT, GetLocaleString(3226));		if (_unit) {		do {			if (_unit.subareaid === area || _unit.subareaid === area + 256 || _unit.subareaid === area + 768) {				return 2;			}		} while (_unit.GetNext());	}		if (CLC_InTown(leader)) {		_unit = CLM_GetWaypointInt();				if (_unit) {			return 3;		}	}		if((me.areaid === 74 && area === 54 || me.areaid === 54 && area === 74)) { // arcane portal		CLM_TakeUnit(NTC_UNIT_OBJECT, 298);		return 4;	}		if (me.areaid >= 66 && me.areaid <= 72 && area === 73) { // duriel's wall		CLM_TakeUnit(NTC_UNIT_OBJECT, 100);		return 4;	}		/*if (me.areaid === 92 && area === 93) {	// kurast sewers		???	}*/		if (me.areaid === 131 && area === 132) { // throne of destruction		CLM_TakeUnit(NTC_UNIT_OBJECT, 563);		return 4;	}		return 0;}function GetLeaderUnit(name) {	var _unit = CLC_FindUnit(NTC_UNIT_PLAYER);		if (_unit) {		do {			if (_unit.name === name) {				return _unit;			}		} while (_unit.GetNext());	}		return false;}function QuestInteract(npc) {	var i;		CLM_GetCloserInt(npc);		for (i = 0; i < 20; i += 1) {		if (i % 10 === 0) {			CLC_DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, npc);		}				if (i % 10 === 9) {			while (!GetUIState(0x09)) {				me.Cancel(0);				CLC_Delay(100);			}						me.Cancel(1);			break;		}				CLC_Delay(200);	}}function Talk(name) {	Print("NPC Name = " + name);	if (!CLC_InTown()) {		Say("/w " + NTConfig_Leader + " I'm not in town!");		return false;	}		if (name) {		name = name.toLowerCase();	} else {		Say("/w " + NTConfig_Leader + " No NPC name given.");		return false;	}		var npc, names;		switch (me.act) {	case 1:		names = ["gheed", "charsi", "akara", "kashya", "cain", "warriv"];		break;	case 2:		names = ["fara", "lysander", "greiz", "elzix", "jerhyn", "meshif", "drognan", "atma", "cain"];		break;	case 3:		names = ["alkor", "asheara", "ormus", "hratli", "cain"];		break;	case 4:		names = ["halbu", "tyrael", "jamella", "cain"];		break;	case 5:		names = ["larzuk", "malah", "qual-kehk", "anya", "nihlathak", "cain"];		break;	}		if (names.indexOf(name) < 0) {		Say("/w " + NTConfig_Leader + " Invalid NPC.");		return false;	}		if (!CLTM_TownMove(name === "jerhyn" ? "palace" : name)) {		CLTM_TownMove("portalspot");		Say("/w " + NTConfig_Leader + " Failed to move to town spot.");		return false;	}		npc = CLC_FindUnit(1);		if (npc) {		do {			if (npc.name.replace(/ /g, "").toLowerCase().indexOf(name) > -1) {				QuestInteract(npc);				CLTM_TownMove("portalspot");				Say("/w " + NTConfig_Leader + " Done talking.");				return true;			}		} while (npc.GetNext());	}		Say("/w " + NTConfig_Leader + " NPC not found.");	CLTM_TownMove("portalspot");		return false;}function ChangeAct(act) {	var npc, portal, preArea;		preArea = me.areaid;		switch (act) {	case 2:		if (me.areaid >= 40) {			break;		}			CLTM_TownMove("warriv");				npc = CLC_FindUnit(1, 155);				if (npc) {			QuestInteract(npc);						if (CLT_DoInteract(npc)) {				me.SelectNPCMenu(0x0D36);			}		}				break;	case 3:		if (me.areaid >= 75) {			break;		}			CLTM_TownMove("palace");				npc = CLC_FindUnit(1, 201);				if (npc) {			QuestInteract(npc);		}				CLTM_TownMove("meshif");				npc = CLC_FindUnit(1, 210);				if (npc) {			QuestInteract(npc);						if (CLT_DoInteract(npc)) {				me.SelectNPCMenu(0x0D38);			}		}				break;	case 4:		if (me.areaid >= 103) {			break;		}				if (CLC_InTown()) {			CLTM_TownMove("cain");						npc = CLC_FindUnit(1, 245);					if (npc) {				QuestInteract(npc);			}					CLTM_TownMove("portalspot");			CLM_UsePortal(null, 102, null);		}				target = CLC_FindUnit(2, 342, 20);				CLM_MoveTo(target.areaid, target.x - 3, target.y - 1);		CLM_TakeUnit(NTC_UNIT_OBJECT, 342);				break;	case 5:		if (me.areaid >= 109) {			break;		}				CLTM_TownMove("tyrael");		npc = CLC_FindUnit(1, NTC_NPC_ID_TYRAEL_ACT_4);		if(npc) {			QuestInteract(npc);					}		var _unit = CLM_TakeUnit(NTC_UNIT_OBJECT, 566)		if(_unit){CLM_TakeUnit(NTC_UNIT_OBJECT, 566);}		if(!_unit)			{			_npc = CLC_FindUnit(NTC_UNIT_NPC, NTC_NPC_ID_TYRAEL_ACT_4);			if(_npc){				if(CLT_VisitNpc(_npc)){					CLT_DoInteract(_npc);					me.SelectNPCMenu(0x58D2);					}				}			}	}			CLC_PingDelay(2000);		while (!me.areaid) {		CLC_Delay(500);	}		if (me.areaid === preArea) {		me.Cancel(1);		CLTM_TownMove("portalspot");		Say("Act change failed.");				return;	}		CLTM_TownMove("portalspot");	Say("Act change successful.");		if (act === 2) {		Say("Don't forget to talk to Drognan after getting the Viper Amulet!");	}}function ClearPosition(range) {	var i, orgx, orgy, monList, skipList, target, result,		tele = CLC_GetSkillLevel(54),		attackcount = 0;			if (NTConfig_AttackSkill[1] < 0 || NTConfig_AttackSkill[3] < 0) {		Print("ÿc1Set your attacks, noob!");		return false;	}		if (!arguments.length) {		range = 20;	}		orgx = me.x;	orgy = me.y;	skipList = [];		MainLoop : while (_attack && attackcount < 300) {		if (me.mode === 0 || me.mode === 17) {			return false;		}				monList = [];		target = CLC_FindUnit(NTC_UNIT_MONSTER);				if (target) {			do {				if (skipList.indexOf(target.gid) < 0) {					if (target.IsAttackable()) {						if (CLA_IsValidMonster(target)) {							if (GetDistance(orgx, orgy, target.x, target.y) <= range && (CheckCollision(me, target, 1) || tele)) {								monList.push(new CLA_MonsterStats(target));							}						}					} else {						skipList.push(target.gid);					}				}			} while (target.GetNext());		}				if (monList.length === 0) {			break;		}				monList.sort(SortMonsters);				target = CLC_FindUnit(NTC_UNIT_MONSTER, monList[0].gid);				if (target && target.IsAttackable()) {			result = CLA_Attack(target, attackcount % 30 === 0);			//Say("!Attacking " + target.name + " " + target.classid);						switch (result) {			case 1:				skipList.push(target.gid);				monList.shift();				break;			case 2:			case 3:				attackcount += 1;				break;			default:				return false;			}		} else {			monList.shift();		}	}		if (attackcount > 0) {		switch (me.classid) {		case 2:			CLA_RaiseArmy();			break;		}				CLT_ClearBelt();		//PickPotions(range);		CLSI_PickItems();		CLP_DoPrecast(false);	}		return true;}function SortMonsters(unitA, unitB) {	var monID = [58, 59, 60, 61, 62, 101, 102, 103, 104, 105, 229, 278, 279, 280, 281, 282, 312, 645, 646, 647, 667, 668, 669, 670];		if (monID.indexOf(unitA.classid) > -1) {		return -1;	} else if (GetDistance(me.x, me.y, unitA.x, unitA.y) < GetDistance(me.x, me.y, unitB.x, unitB.y)) {		return -1;	}		return 1;}function CLA_MonsterStats(unit) {	this.name = unit.name;	this.x = unit.x;	this.y = unit.y;	this.gid = unit.gid;	this.hp = unit.hp;	this.classid = unit.classid;	this.spectype = unit.spectype;}function PickPotions(range) {	var i, item, itemList, checkedItem;		item = CLC_FindUnit(4);		if (!item) {		return false;	}		itemList = [];		do {		if ((item.mode === 3 || item.mode === 5) && item.itemtype >= 76 && item.itemtype <= 78 && GetDistance(me.x, me.y, item.x, item.y) <= range) {			if (CLSI_CheckItem(item)) {				itemList.push(new CLSI_ItemInt(item, 1));			}		}	} while (item.GetNext());		while (itemList.length > 0) {		itemList.sort(CLSI_SortItems);				checkedItem = itemList.shift();		item = CLC_FindUnit(NTC_UNIT_ITEM, checkedItem.GID);				if (item && !CLSI_IsLimitedItemInt(item) && CLSI_PickUpItemInt(item)) {			switch(checkedItem.ClassID) {			case 515: 	// Rejuvenation Potion			case 516: 	// Full Rejuvenation Potion				Print("Picked up "+ NTC_ItemQualityToD2Color[9] + GetLocaleString(2209 + checkedItem.ClassID - 515));				break;			case 587: 	// Minor Healing Potion			case 588: 	// Light Healing Potion			case 589: 	// Healing Potion			case 590: 	// Greater Healing Potion			case 591: 	// Super Healing Potion				Print("Picked up "+ NTC_ItemQualityToD2Color[10] + GetLocaleString(2266 + checkedItem.ClassID - 587));				break;			case 592: 	// Minor Mana Potion			case 593: 	// Light Mana Potion			case 594: 	// Mana Potion			case 595: 	// Greater Mana Potion			case 596: 	// Super Mana Potion				Print("Picked up "+ NTC_ItemQualityToD2Color[4] + GetLocaleString(2266 + checkedItem.ClassID - 587));				break;			}		}	}		return true;}function OpenContainers(range) {	var i, strings, unit, orgX, orgY;		orgX = me.x;	orgY = me.y;	strings = [		3222, // = Barrel		3224, // = an Exploding Barrel		3236, // = Crate		3237, // = Casket		3241, // = Corpse		3242, // = Dead Rogue		3243, // = Dead Rogue		3246, // = Mummy Sarcophagus		3247, // = Armor Stand		3248, // = Weapon Rack		3249, // = Sarcophagus		3251, // = Large Urn		3252, // = Canopic Jar		3254, // = Undefiled Grave		3256, // = Urn		3260, // = Chest		3262, // = Locked Chest		3268, // = Loose Boulder		3269, // = Loose Rock		3270, // = Hollow Log		3275, // = Guard Corpse		3279, // = Rat's Nest		3283, // = Skeleton		3284, // = Skullpile		3285, // = Cocoon		3293, // = Goo Pile		3297, // = Skull Pile		3302, // = Basket		3303, // = Rock Pile		3307, // = Dead Guard		3309, // = Sarcophagus		3310, // = Dead Villager		3321, // = Bone Chest		3323, // = Hung Skeleton		3271, // = Hiding Spot		3274, // = Hidden Stash		3315 // = Stash	];		for (i = 0; i < strings.length; i += 1) {		unit = CLC_FindUnit(2, GetLocaleString(strings[i]));				if (unit) {						do {				if (CheckCollision(me, unit, 1) && GetDistance(orgX, orgY, unit.x, unit.y) <= range && CLC_OpenChest(unit)) {					CLSI_PickItems();				}			} while (unit.GetNext());		}	}}function CLSI_SortItems(itemA, itemB) {	if (GetDistance(me.x, me.y, itemA.x, itemA.y) < GetDistance(me.x, me.y, itemB.x, itemB.y)) {		return -1;	}		return 1;}function enchantgroup(){	var chantduration = [144];	timecheck = Math.round(GetTickCount() / 1000);		if((CLC_InTown() || (lastchant+20) > timecheck))		return;		lastchant = timecheck;		var _iEnchant;    var _unit;    _unit = CLC_FindUnit(NTC_UNIT_PLAYER);    if (_unit)    {        do        {            if (GetDistance(me, _unit) < 30 && _unit.mode != 0 && !_unit.GetState(16))            {				//if(chantChars)					CLC_CastSkill(52, NTC_HAND_RIGHT, _unit);            }        } while (_unit.GetNext());    }    _unit = CLC_FindUnit(NTC_UNIT_MERC);    if (_unit)    {        do        {	_parent = _unit.GetParent();			if(_parent)				{				if (GetDistance(me, _unit) < 30 && CLC_InMyParty(_parent.name) && _parent.name != me.name  && _unit.mode != 0 && !_unit.GetState(16))                CLC_CastSkill(52, NTC_HAND_RIGHT, _unit);				}        } while (_unit.GetNext());    }	return;}